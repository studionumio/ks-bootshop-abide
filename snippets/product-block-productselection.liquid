{% liquid 
  assign pt = block.settings.pt | prepend: 'pt-'
  assign pb = block.settings.pb | prepend: 'pb-'
%}
<div class="product-selection" style="display: flex; justify-content: space-between; flex-wrap: wrap; width: 100%;">
  <div class="option-selection" style="width: 55%; padding: 2px;">
    {% unless product.has_only_default_variant %}
      <ul 
        class="product-options list-unstyled mb-0 {{ pt }} {{ pb }}"
        aria-label="{{ 'product.product_options' | t }}">
        {% for option in product.options_with_values %}
          <li class="py-3">
            {% if block.settings.options_style == 'buttons' %}
              <p class="mb-1">
                Select a Quantity:
              </p>
              <ul class="size-buttons list-unstyled">
                {% for value in option.values %}
                  {% assign variant = product.variants | where: 'option1', value | first %}
                  <li>
                    <input 
                      class="visually-hidden" 
                      type="radio" 
                      name="option-{{ option.name | handleize }}" 
                      id="option-{{ option.name | handleize }}-{{ value | handleize }}" 
                      value="{{ value | escape }}"
                      data-sku="{{ variant.sku }}"
                      {% if option.selected_value == value %}checked{% endif %}>
                    <label for="option-{{ option.name | handleize }}-{{ value | handleize }}">
                      <p style="font-size: 18px; font-weight: bold;">{{ value }}</p>
                      {% if variant %}
                        <span class="variant-price">
                          {% if variant.compare_at_price > variant.price %}
                            <span class="abide-product-price-final-sale">
                              {{ variant.price | money_without_trailing_zeros }}
                            </span>
                            <s class="abide-product-price-compare">
                              {{ variant.compare_at_price | money_without_trailing_zeros }}
                            </s>
                          {% else %}
                            {{ variant.price | money_without_trailing_zeros }}
                          {% endif %}
                        </span>

                        {% if variant.compare_at_price > variant.price %}
                         <span class="abide-product-sale-badge badge" style="margin-left: 4px;">
                            {{ 'product.save' | t }}
                            {% if block.settings.badge_discount_type == 'percentage' %}
                              {{ variant.compare_at_price | minus: variant.price | times: 100 | divided_by: variant.compare_at_price | round | append: '%' }}
                            {% else %}
                              {{ variant.compare_at_price | minus: variant.price | money_without_trailing_zeros }}
                            {% endif %}
                          </span>
                        {% endif %}

                        {% unless variant.available %}
                          <span class="abide-badge abide-product-sold-out-badge">
                            {{ 'product.sold_out' | t }}
                          </span>
                        {% endunless %}
                      {% endif %}
                    </label>
                  </li>
                {% endfor %}
              </ul>
            {% endif %}
          </li>
        {% endfor %}
      </ul>
    {% endunless %}
  </div>

  <div class="related-products" style="width: 45%; padding: 2px;">
    <div id="product-recommendations-container" class="loading">
       <p class="sizeselect">
                Select a Size:
              </p>
      <ul id="product-recommendations-list" class="list"></ul>
      <div id="no-recommendations" style="display: none;">
        <p>No related products found. Check out some of our other popular products:</p>
        <ul>
          {% for product in collections['your-fallback-collection'].products limit: 5 %}
            <li><a href="{{ product.url }}">{{ product.metafields.custom.size.value }}</a></li>
          {% endfor %}
        </ul>
      </div>
    </div>
  </div>
</div>
<script>
  async function fetchProductRecommendations() {
    const baseUrl = '/recommendations/products.json';
    const productId = {{ product.id }};
    const limit = 4;
    const intent = 'related';

    try {
      // Fetch recommendations and current size in parallel
      const [currentSize, recommendationsResponse] = await Promise.all([
        fetchProductMetafields(productId),
        fetch(`${baseUrl}?product_id=${productId}&limit=${limit}&intent=${intent}`)
      ]);

      const recommendationsData = await recommendationsResponse.json();

      if (recommendationsData && recommendationsData.products && recommendationsData.products.length > 0) {
        const productIds = recommendationsData.products.map(product => product.id);
        const metafields = await fetchMultipleProductMetafields(productIds);

        const recommendationsList = document.getElementById('product-recommendations-list');

        // Render current size first
        recommendationsList.innerHTML = `<li class="current-size"><a href="#" class="size-box active">✔️ ${currentSize}</a></li>`;
        
        // Render other sizes
        recommendationsData.products.forEach(product => {
          const customSize = metafields[product.id] || 'Unknown size';
          if (customSize !== currentSize) {
            recommendationsList.innerHTML += `<li><a href="${product.url}" class="size-box">${customSize}</a></li>`;
          }
        });
      } else {
        document.getElementById('no-recommendations').style.display = 'block';
      }

      document.getElementById('product-recommendations-container').classList.remove('loading');
    } catch (error) {
      console.error('Failed to load product recommendations:', error);
    }
  }

  // Fetch multiple metafields for recommended products in one API call
  async function fetchMultipleProductMetafields(productIds) {
    const storefrontAccessToken = '8e0b6fef95af50d09f34e85b96c593d1';
    const storeDomain = 'abidehawaii.com';

    const query = `
      query {
        nodes(ids: [${productIds.map(id => `"gid://shopify/Product/${id}"`).join(',')}]) {
          ... on Product {
            id
            metafield(namespace: "custom", key: "size") {
              value
            }
          }
        }
      }
    `;

    try {
      const response = await fetch(`https://${storeDomain}/api/2024-01/graphql.json`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'X-Shopify-Storefront-Access-Token': storefrontAccessToken,
        },
        body: JSON.stringify({ query }),
      });

      const result = await response.json();

      // Return a map of product IDs to their metafield values
      const metafields = {};
      result.data.nodes.forEach(node => {
        metafields[node.id.split('/').pop()] = node.metafield ? node.metafield.value : 'Unknown size';
      });
      return metafields;
    } catch (error) {
      console.error('Failed to fetch product metafields:', error);
      return {};
    }
  }

  // Fetch metafield for a single product
  async function fetchProductMetafields(productId) {
    const storefrontAccessToken = '8e0b6fef95af50d09f34e85b96c593d1';
    const storeDomain = 'abidehawaii.com';

    const query = `
      query {
        product(id: "gid://shopify/Product/${productId}") {
          metafield(namespace: "custom", key: "size") {
            value
          }
        }
      }
    `;

    try {
      const response = await fetch(`https://${storeDomain}/api/2024-01/graphql.json`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'X-Shopify-Storefront-Access-Token': storefrontAccessToken,
        },
        body: JSON.stringify({ query }),
      });

      const result = await response.json();
      return result.data.product.metafield ? result.data.product.metafield.value : 'Unknown size';
    } catch (error) {
      console.error('Failed to fetch product metafields:', error);
      return 'Unknown size';
    }
  }

  document.addEventListener('DOMContentLoaded', fetchProductRecommendations);
</script>


<style>

  .sizeselect {
  margin-bottom: -6px;
  margin-top: 0px;
  padding-bottom: 0px;
  padding-top: 0px;
  margin-top: 10px;
  }
  .product-selection {
    display: flex;
    justify-content: space-between;
    flex-wrap: wrap;
  }

  .option-selection {

    max-width: 75%;
    padding: 2px;
  }

  .related-products {

    min-width: 25%;
    padding: 2px;
  }

  .related-products.loading::before {
    content: 'Loading Other Sizes...';
    font-size: 16px;
    color: #888;
  }

  ul.list {
    list-style-type: none;
    padding-left: 0;
  }

  ul.list li {
    margin-bottom: 10px;
  }

  .size-box {
    display: block;
    padding: 10px;
    border: 1px solid #000000;
    border-radius: 5px;
    text-align: center;
    transition: background-color 0.3s, color 0.3s;
    color: #000000;
    background-color: #ffffff;
    text-decoration: none;
    max-width: 150px;
    float: left;
    margin: 3px;
  }

  .size-box:hover {
    background-color: #efefef;
    cursor: pointer;
  }

  .size-box.active {
    background-color: green;
    color: white;
  }

  ul.list li a:hover {
    text-decoration: none;
  }
</style>
