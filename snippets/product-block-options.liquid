{% liquid 
  assign pt = block.settings.pt | prepend: 'pt-'
  assign pb = block.settings.pb | prepend: 'pb-'
%}

{% unless product.has_only_default_variant %}
  <ul 
    class="product-options list-unstyled mb-0 {{ pt }} {{ pb }}"
    aria-label="{{ 'product.product_options' | t }}">
    {% for option in product.options_with_values %}
      <li class="py-3">
        {% if block.settings.options_style == 'buttons' %}       
          <p class="mb-1">
            {{ option.name }}
          </p>
          <ul class="size-buttons list-unstyled">
            {% for value in option.values %}
              <li>
                <input 
                  class="visually-hidden variant-selector" 
                  type="radio" 
                  name="option-{{ option.name | handleize }}" 
                  id="option-{{ option.name | handleize }}-{{ value | handleize }}" 
                  value="{{ value | escape }}"
                  {% if option.selected_value == value %}checked{% endif %}>
                <label for="option-{{ option.name | handleize }}-{{ value | handleize }}">
                  {{ value }}
                </label>
              </li>
            {% endfor %}
          </ul>
        {% else %}
          <label class="form-label" for="option-{{ option.name | handleize }}">
            {{ option.name }}
          </label>
          <select
            id="option-{{ option.name | handleize }}"
            name="option-{{ option.name | handleize }}"
            class="form-select variant-selector">
            {% for value in option.values %}
              <option 
                value="{{ value | escape }}" {% if value == option.selected_value %}selected{% endif %}>
                {{ value }}
              </option>
            {% endfor %}
          </select>
        {% endif %}
      </li>
    {% endfor %}
  </ul>
{% endunless %}

<script>
  document.addEventListener('DOMContentLoaded', function() {
    // Select the media gallery element
    const mediaGallery = document.querySelector('.product-media-gallery');
    if (!mediaGallery) return;

    // Parse variants data from the media gallery's data attribute
    const variants = JSON.parse(mediaGallery.dataset.variants || '[]');

    // Initialize Swiper if not already initialized
    const swiperMainElement = mediaGallery.querySelector('.swiper-main.swiper');
    if (!swiperMainElement.swiper) {
      var swiperMain = new Swiper(swiperMainElement, {
        // Add your Swiper configuration here
        loop: false,
        pagination: {
          el: mediaGallery.querySelector('.swiper-pagination'),
          clickable: true,
        },
        navigation: {
          nextEl: mediaGallery.querySelector('.swiper-button-next'),
          prevEl: mediaGallery.querySelector('.swiper-button-prev'),
        },
        scrollbar: {
          el: mediaGallery.querySelector('.swiper-scrollbar'),
          draggable: true,
        },
      });
    } else {
      var swiperMain = swiperMainElement.swiper;
    }

    // Function to find the selected variant based on chosen options
    function findSelectedVariant() {
      const selectedOptions = [];
      const variantSelectors = mediaGallery.closest('section').querySelectorAll('.variant-selector');

      variantSelectors.forEach(selector => {
        if (selector.type === 'radio') {
          const checked = mediaGallery.closest('section').querySelector(`input[name="${selector.name}"]:checked`);
          if (checked) {
            selectedOptions.push(checked.value);
          }
        } else if (selector.tagName.toLowerCase() === 'select') {
          selectedOptions.push(selector.value);
        }
      });

      // Find the variant that matches all selected options
      return variants.find(variant => {
        return variant.options.every((optionValue, index) => optionValue === selectedOptions[index]);
      });
    }

    // Function to update the media gallery based on the selected variant
    function updateMediaGallery() {
      const selectedVariant = findSelectedVariant();
      if (selectedVariant) {
        const featuredMediaId = selectedVariant.featured_media ? selectedVariant.featured_media.id : null;
        let targetSlide = 0; // Default to first slide

        if (featuredMediaId) {
          const targetMediaSlide = mediaGallery.querySelector(`.swiper-slide[data-media-id="${featuredMediaId}"]`);
          if (targetMediaSlide) {
            const slides = Array.from(mediaGallery.querySelectorAll('.swiper-slide'));
            targetSlide = slides.indexOf(targetMediaSlide);
          }
        }

        // Slide to the target slide
        swiperMain.slideTo(targetSlide);
      } else {
        // If no variant matches, default to first slide
        swiperMain.slideTo(0);
      }
    }

    // Attach event listeners to all variant selectors
    const variantSelectors = mediaGallery.closest('section').querySelectorAll('.variant-selector');

    variantSelectors.forEach(selector => {
      selector.addEventListener('change', updateMediaGallery);
    });

    // Initial update on page load
    updateMediaGallery();
  });
</script>
